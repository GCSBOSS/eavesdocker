stages:
  - test
  - build
  - publish

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

# Make quality report downloadable
code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]
  rules:
    - if: '$CI_COMMIT_TAG == null'

sast:
  variables:
    SAST_EXCLUDED_PATHS: test/**

# Lint js files.
lint-js:
 image: node
 stage: test
 rules:
   - if: '$CI_COMMIT_TAG == null'
 tags:
   - docker
 script:
   - npm install -g eslint
   - eslint --ignore-pattern "**/*.min.js" $CI_PROJECT_DIR

# Performs unit testing.
unit-test:
  variables:
    DOCKER_URL: docker
    MONGO_URL: mongodb://mongo:27017
    REDIS_HOST: redis
    MC_HOST: stpaquet-alpinemailcatcher
  services:
    - redis
    - mongo
    - docker:dind
    - stpaquet/alpinemailcatcher
  coverage: '/Statements\s*:\s*(\d+(?:\.\d+)?\%)/'
  image: registry.gitlab.com/gcsboss/docker-mocha-nyc:0.1.0-alpine
  stage: test
  artifacts:
    paths: [coverage]
  tags:
    - docker
  script:
    - npm i .
    - npm run coverage

build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  only:
    refs:
      - /^v\d+\.\d+\.\d+/
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  script:
    - docker build --pull -t "gcsboss/$CI_PROJECT_NAME:${CI_COMMIT_TAG:1}" .
    - docker build --pull -t "gcsboss/$CI_PROJECT_NAME" .
    - docker push "gcsboss/$CI_PROJECT_NAME:${CI_COMMIT_TAG:1}"
    - docker push "gcsboss/$CI_PROJECT_NAME"

# Publish package to NPM.
publish:
  stage: publish
  image: node
  tags:
    - docker
  only:
    - tags
    - triggers
  except:
    variables:
      - $CI_COMMIT_TAG =~ /beta/
  script:
    - npm install -g npm-cli-login
    - npm-cli-login
    - npm publish
